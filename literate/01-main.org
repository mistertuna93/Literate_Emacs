#+TITLE: Main Config
#+DATE: 2023-01-22T10:02:31+01:00
#+DRAFT: false
#+TAGS[]: emacs config
#+PROPERTY: header-args:emacs-lisp :comments link :results none

* Main config
This is the main entry point for my literate configuration.  I've
decided to split my configurations into seperate ~.org~ files to keep
related stuff together.  You can find this configuration at [[https://github.com/faijdherbe/emacs-config][GitHub]],
and on [[https://www.faijdherbe.net][www.faijdherbe.net]].

To use this configuration add the following codeblock to your
=~/.emacs.d/init.el=, changing the path to this configuration file
accordingly.

#+begin_src emacs-lisp :tangle init.el
;; load main literate configuration file
          ;(setq user-init-file (or load-file-name (buffer-file-name)))
                                          ;(setq user-emacs-directory (concat (file-name-directory user-init-file) "../.emacs.d"))

;; (package-initialize)
;; (setq mistertuna-config--config-path
;;      "~/Documents/emacs-config/literate")

(defvar mistertuna-config--config-path
  (expand-file-name "~/Documents/emacs-config/literate/"))

(org-babel-load-file
 (expand-file-name "01-main.org" mistertuna-config--config-path))

#+end_src

Alternatively, you can press =C-c C-c= on this codeblock to
evaluate immediately.
 Desktop file for testing
During debugging i'd like to use a desktop file for quick launching Emacs with our own configuration.  Let's call our app =Mymacs=.

The path from the configuration earlier is injected upon tangling this file (=C-c C-v t=).


* Automated Tangling on Save

This will ensure that every time an Org file inside our config is saved,
it is automatically tangled to the `elisp/` directory.

#+begin_src emacs-lisp :tangle yes
(defun mistertuna/tangle-org-file (org-file)
  "Tangle ORG-FILE into the elisp/ directory next to the literate config."
  (let* ((base-name (file-name-base org-file))
         (dest-dir (expand-file-name "elisp" mistertuna-config--config-path))
         (dest-file (expand-file-name (concat base-name ".el") dest-dir)))
    (unless (file-directory-p dest-dir)
      (make-directory dest-dir t))
    (org-babel-tangle-file org-file dest-file)
    (message "Tangled %s â†’ %s" org-file dest-file)))

(defun mistertuna/tangle-all-literate-org-files ()
  "Tangle all .org files in the config path into elisp/ directory."
  (interactive)
  (let ((org-files (directory-files mistertuna-config--config-path t "\\.org$")))
    (dolist (f org-files)
      (mistertuna/tangle-org-file f))))

(defun mistertuna/auto-tangle-on-save ()
  "Auto-tangle the current file or all files if Main is being saved."
  (when (and (eq major-mode 'org-mode)
             (string-prefix-p (expand-file-name mistertuna-config--config-path)
                              (buffer-file-name)))
    (if (string-equal (file-name-nondirectory (buffer-file-name)) "01-main.org")
        (mistertuna/tangle-all-literate-org-files)
      (mistertuna/tangle-org-file (buffer-file-name)))))

(add-hook 'after-save-hook #'mistertuna/auto-tangle-on-save)
#+end_src


#+begin_src conf-desktop :tangle ~/.local/share/applications/mymacs.desktop :mkdirp yes
[Desktop Entry]
Name=TunaMacs
Type=Application
Comment=Emacs with my WIP Configuration
Exec=/usr/bin/emacs -Q --eval "(setq jf/dev-env t)" -l "~/Documents/emacs-config/literate/init.el"
Name[en_US]=TunaMacs
#+end_src
/note: It looks like GitHub and Hugo don't support =conf-desktop=, hence the lack of syntax highlighting. I'll need to look into this some other time./

* Package Manager

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)

(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(let ((repo (expand-file-name "elpaca/" elpaca-repos-directory)))
  (unless (file-exists-p (expand-file-name "elpaca.el" repo))
    (make-directory repo t)
    (with-current-buffer 
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/progfolio/elpaca/main/elpaca-installer.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (add-to-list 'load-path repo)
  (require 'elpaca))

(elpaca elpaca-use-package
  (elpaca-use-package-mode))

(setq use-package-always-ensure t)
#+end_src


* Specific Configurations
Below we find all our configuration files.  I should be able to merge
the first two columns as it's pretty much redundant info, but let's
postpone this for now. 
  
#+TBLNAME: orgmode-files
| Module             | filename             | enabled | description                                     |
|--------------------+----------------------+---------+-------------------------------------------------|
| Tunamacs           | 10-tmacs.org         | yes     | The Entry point into Literate Config.           |
|                    |                      |         |                                                 |
|--------------------+----------------------+---------+-------------------------------------------------|
| UI Improvment      | 20-ui.org            | yes     | UI modifications (Theme, Modeline, Icons, ETC.) |
|                    |                      |         |                                                 |
|--------------------+----------------------+---------+-------------------------------------------------|
| editing enhance    | 30-edit.org          | yes     | Editing Enhancements                            |
|                    |                      |         |                                                 |
|--------------------+----------------------+---------+-------------------------------------------------|
| [[file:30-navigation.org][navigation]]         | 40-navigation.org    | yes     | navigation and completion                       |
|                    | 41-snippetAbrev.org  | yes     | adds snippets and abreviations                  |
|--------------------+----------------------+---------+-------------------------------------------------|
| Project Management | 50-projects.org      | yes     | Project Management and Version Control          |
|                    |                      |         |                                                 |
|--------------------+----------------------+---------+-------------------------------------------------|
| org-mode           | 60-org.org           | yes     | Org-mode customization and package config       |
|                    |                      |         |                                                 |
|--------------------+----------------------+---------+-------------------------------------------------|
| tools              | 70-tools.org         | yes     | Misc. tools (Ai, Devops, shell)                 |
| ansible tools      | 71-tools-Ansible.org | yes     | Scripting for Ansible scaffold Literate Doc     |
|--------------------+----------------------+---------+-------------------------------------------------|
| keybinds           | 80-keybinds.org      | yes     | setup Keymaps for Modules                       |
|                    |                      |         |                                                 |
|--------------------+----------------------+---------+-------------------------------------------------|
|                    |                      |         |                                                 |

The following script will use the table above as source to load all
other configurations in order - if enabled.

#+NAME: load-configs
#+begin_src emacs-lisp :var files=orgmode-files
(dolist (record files)
  (let* ((filename (cadr record))
         (enabled (caddr record))
         (dir (or mistertuna-config--config-path ""))
         (path (expand-file-name (concat (string-trim dir "/")
                                         "/" filename))))
    (if (and (string= "yes" enabled)
             (file-readable-p path))
        (progn 
          (message "load: %s" filename)
          (org-babel-load-file path)))))
#+end_src
