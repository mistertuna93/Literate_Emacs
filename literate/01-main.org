#+TITLE: Main Config
#+DATE: 2023-01-22T10:02:31+01:00
#+DRAFT: false
#+TAGS[]: emacs config
#+PROPERTY: header-args:emacs-lisp :comments link :results none 

* Main config
This is the main entry point for my literate configuration.  I've
decided to split my configurations into seperate ~.org~ files to keep
related stuff together.  You can find this configuration at [[https://github.com/faijdherbe/emacs-config][GitHub]],
and on [[https://www.faijdherbe.net][www.faijdherbe.net]].

To use this configuration add the following codeblock to your
=~/.emacs.d/init.el=, changing the path to this configuration file
accordingly.

#+begin_src emacs-lisp :tangle init.el
;; load main literate configuration file
;(setq user-init-file (or load-file-name (buffer-file-name)))
;(setq user-emacs-directory (concat (file-name-directory user-init-file) "../.emacs.d"))

(package-initialize)

(setq mistertuna-config--config-path
      "~/Documents/emacs-config/literate")

(org-babel-load-file
 (expand-file-name (concat (string-trim mistertuna-config--config-path "/")
                           "/01-main.org")))
#+end_src

Alternatively, you can press =C-c C-c= on this codeblock to
evaluate immediately.
 Desktop file for testing
During debugging i'd like to use a desktop file for quick launching Emacs with our own configuration.  Let's call our app =Mymacs=.

The path from the configuration earlier is injected upon tangling this file (=C-c C-v t=).

  #+begin_src conf-desktop :tangle ~/.local/share/applications/mymacs.desktop 
[Desktop Entry]
Name=Mymacs
Type=Application
Comment=Emacs with my WIP Configuration
Exec=/usr/bin/emacs -Q --eval "(setq jf/dev-env t)" -l "~/Documents/emacs-config/literate/init.el"
Icon=/opt/giteye/icon.xpm
Name[en_US]=Mymacs
  #+end_src
/note: It looks like GitHub and Hugo don't support =conf-desktop=, hence the lack of syntax highlighting. I'll need to look into this some other time./

* Package Manager

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)

(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(let ((repo (expand-file-name "elpaca/" elpaca-repos-directory)))
  (unless (file-exists-p (expand-file-name "elpaca.el" repo))
    (make-directory repo t)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/progfolio/elpaca/main/elpaca-installer.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (add-to-list 'load-path repo)
  (require 'elpaca))

(elpaca elpaca-use-package
  (elpaca-use-package-mode))

(setq use-package-always-ensure t)
#+end_src


* Specific Configurations
Below we find all our configuration files.  I should be able to merge
the first two columns as it's pretty much redundant info, but let's
postpone this for now. 
  
#+TBLNAME: orgmode-files
| config             | filename          | enabled | description                                                  |
|--------------------+-------------------+---------+--------------------------------------------------------------|
| UI Improvment      | 20-ui.org         | yes     | UI modifications (Theme, Modeline, Icons, ETC.)              |
| editing enhance    | 30-edit.org       | yes     | Editing Enhancements ( )                                     |
| [[file:30-navigation.org][navigation]]         | 40-navigation.org | yes     | navigation and autocomplete                                  |
| Project Management | 50-projects.org   | yes     | Project Management and Version Control                       |
| php                |                   | no      | as this is my main language, it deserves its own config file |
| org-mode           |                   | no      | org-roam and org-agenda configuration                        |
| config             | 99-config.org     | yes     | Local config that can set some specific settings             |
|                    |                   |         |                                                              |

The following script will use the table above as source to load all
other configurations in order - if enabled.

#+NAME: load-configs
#+begin_src emacs-lisp :var files=orgmode-files
(dolist (record files)
  (let* ((filename (cadr record))
         (enabled (caddr record))
         (dir (or mistertuna-config--config-path ""))
         (path (expand-file-name (concat (string-trim dir "/")
                                         "/" filename))))
    (if (and (string= "yes" enabled)
             (file-readable-p path))
        (progn 
          (message "load: %s" filename)
          (org-babel-load-file path)))))
#+end_src
